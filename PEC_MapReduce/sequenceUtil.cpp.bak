#include "sequenceUtil.hpp"
#include <stdlib.h>
#include "stacktrace.hpp"
#include <math.h>
#include <iostream>
#include <sstream>

static const int MAX_LINE_LENGTH = 500000;


void align_reads_assembly(string seq_ref, string seq_read, double mu, double delta, ofstream &outFile, int DS, int *num_consensus) {




}

int smith_waterman(string seq_a, string seq_b, double mu, double delta, int *loc_a, int *loc_b, char *consensus_a, char *consensus_b) {

  int ind;
  int N_a = seq_a.length();                     // get the actual lengths of the sequences
  int N_b = seq_b.length();

  double **H = (double **) malloc(sizeof( *H ) * (N_a+1));
  if(H) { for(int i=0; i<(N_a+1); i++) H[i] = (double *) malloc(sizeof( *H[i] ) * (N_b+1)); }

  for(int i=0;i<=N_a;i++)
    for(int j=0;j<=N_b;j++) H[i][j]=0.0;

  double *temp = (double *) malloc(sizeof(double)*4);
  double **I_i = (double **) malloc(sizeof( *I_i ) * (N_a+1));
  double **I_j = (double **) malloc(sizeof( *I_j ) * (N_a+1));

  if(I_i) { for(int i=0; i<(N_a+1); i++) I_i[i] = (double *) malloc(sizeof( *I_i[i] ) * (N_b+1)); }
  if(I_j) { for(int i=0; i<(N_a+1); i++) I_j[i] = (double *) malloc(sizeof( *I_j[i] ) * (N_b+1)); }

  for(int i=1;i<=N_a;i++){
    for(int j=1;j<=N_b;j++){
      temp[0] = H[i-1][j-1]+similarity_score(seq_a[i-1],seq_b[j-1], mu);
      temp[1] = H[i-1][j]-delta;
      temp[2] = H[i][j-1]-delta;
      temp[3] = 0.;
      H[i][j] = find_array_max(temp,4, ind);
      switch(ind){
      case 0:                                  // score in (i,j) stems from a match/mismatch
        I_i[i][j] = i-1;
        I_j[i][j] = j-1;
        break;
      case 1:                                  // score in (i,j) stems from a deletion in sequence A
        I_i[i][j] = i-1;
        I_j[i][j] = j;
        break;
      case 2:                                  // score in (i,j) stems from a deletion in sequence B
        I_i[i][j] = i;
        I_j[i][j] = j-1;
        break;
      case 3:                                  // (i,j) is the beginning of a subsequence
        I_i[i][j] = i;
        I_j[i][j] = j;
        break;
      }
    }
  }

  double H_max = 0.;
  int i_max=0,j_max=0;
  for(int i=0;i<=N_a;i++){
    for(int j=0;j<=N_b;j++){
      if(H[i][j]>H_max){
        H_max = H[i][j];
        i_max = i;
        j_max = j;
      }
    }
  }

  int current_i=i_max,current_j=j_max;
  int next_i=I_i[current_i][current_j];
  int next_j=I_j[current_i][current_j];
  int tick=0;

  int *tmploc_a = (int *) malloc(sizeof(int) * (N_a+N_b+2));
  int *tmploc_b = (int *) malloc(sizeof(int) * (N_b+N_a+2));

  while(((current_i!=next_i) || (current_j!=next_j)) && (next_j!=0) && (next_i!=0)){

    if(next_i==current_i)  {
        consensus_a[tick] = '-';
        tmploc_a[tick] = -1;
    } else {
        consensus_a[tick] = seq_a[current_i-1];
        tmploc_a[tick] = current_i-1;
    }

    if(next_j==current_j)  {
        consensus_b[tick] = '-';
        tmploc_b[tick] = -1;
    } else {
        consensus_b[tick] = seq_b[current_j-1];
        tmploc_b[tick] = current_j-1;
    }

    current_i = next_i;
    current_j = next_j;
    next_i = I_i[current_i][current_j];
    next_j = I_j[current_i][current_j];
    tick++;
 }

  for(int i=tick-1;i>=0;i--) loc_a[tick-1-i] = tmploc_a[i];
  for(int j=tick-1;j>=0;j--) loc_b[tick-1-j] = tmploc_b[j];

  free(H);
  free(temp);
  free(I_i);
  free(I_j);

  free(tmploc_a);
  free(tmploc_b);

  return(tick);
}





int check_strand_direction(string seq_a, string seq_b, double mu, double delta, int operation_index, ofstream &outFile, int DDD ) {

  int ind;
  int N_a = seq_a.length();                     // get the actual lengths of the sequences
  int N_b = seq_b.length();

//  double **H = (double **) malloc(sizeof( *H ) * (N_a+1));
//  if(H) { for(int i=0; i<(N_a+1); i++) H[i] = (double *) malloc(sizeof( *H[i] ) * (N_b+1)); }

//  for(int i=0;i<=N_a;i++)
//    for(int j=0;j<=N_b;j++) H[i][j]=0.0;

//  double *temp = (double *) malloc(sizeof(double)*4);
//  double **I_i = (double **) malloc(sizeof( *I_i ) * (N_a+1));
//  double **I_j = (double **) malloc(sizeof( *I_j ) * (N_a+1));

//  if(I_i) { for(int i=0; i<(N_a+1); i++) I_i[i] = (double *) malloc(sizeof( *I_i[i] ) * (N_b+1)); }
//  if(I_j) { for(int i=0; i<(N_a+1); i++) I_j[i] = (double *) malloc(sizeof( *I_j[i] ) * (N_b+1)); }

//  for(int i=1;i<=N_a;i++){
//    for(int j=1;j<=N_b;j++){
//      temp[0] = H[i-1][j-1]+similarity_score(seq_a[i-1],seq_b[j-1], mu);
//      temp[1] = H[i-1][j]-delta;
//      temp[2] = H[i][j-1]-delta;
//      temp[3] = 0.;
//      H[i][j] = find_array_max(temp,4, ind);
//      switch(ind){
//      case 0:                                  // score in (i,j) stems from a match/mismatch
//        I_i[i][j] = i-1;
//        I_j[i][j] = j-1;
//        break;
//      case 1:                                  // score in (i,j) stems from a deletion in sequence A
//        I_i[i][j] = i-1;
//        I_j[i][j] = j;
//        break;
//      case 2:                                  // score in (i,j) stems from a deletion in sequence B
//        I_i[i][j] = i;
//        I_j[i][j] = j-1;
//        break;
//      case 3:                                  // (i,j) is the beginning of a subsequence
//        I_i[i][j] = i;
//        I_j[i][j] = j;
//        break;
//      }
//    }
//  }

//  double H_max = 0.;
//  int i_max=0,j_max=0;
//  for(int i=0;i<=N_a;i++){
//    for(int j=0;j<=N_b;j++){
//      if(H[i][j]>H_max){
//        H_max = H[i][j];
//        i_max = i;
//        j_max = j;
//      }
//    }
//  }

//  int current_i=i_max,current_j=j_max;
//  int next_i=I_i[current_i][current_j];
//  int next_j=I_j[current_i][current_j];
//  int tick=0;
  char *consensus_a = (char *) malloc( sizeof(char) * (N_a+N_b+2) );
  char *consensus_b = (char *) malloc( sizeof(char) * (N_a+N_b+2) );

  int *loc_a    = (int *) malloc(sizeof(int) * (N_a+N_b+2));
  int *loc_b    = (int *) malloc(sizeof(int) * (N_b+N_a+2));

//  int *tmploc_a = (int *) malloc(sizeof(int) * (N_a+N_b+2));
//  int *tmploc_b = (int *) malloc(sizeof(int) * (N_b+N_a+2));

//  while(((current_i!=next_i) || (current_j!=next_j)) && (next_j!=0) && (next_i!=0)){

//    if(next_i==current_i)  {
//	consensus_a[tick] = '-';                  
//	tmploc_a[tick] = -1;
//    } else {                   
//	consensus_a[tick] = seq_a[current_i-1];   
//	tmploc_a[tick] = current_i-1;
//    }

//    if(next_j==current_j)  {
//	consensus_b[tick] = '-';                  
//	tmploc_b[tick] = -1;
//    } else {                  
//	consensus_b[tick] = seq_b[current_j-1];   
//	tmploc_b[tick] = current_j-1;
//    }

//    current_i = next_i;
//    current_j = next_j;
//    next_i = I_i[current_i][current_j];
//    next_j = I_j[current_i][current_j];
//    tick++;
// }

//  for(int i=tick-1;i>=0;i--) loc_a[tick-1-i] = tmploc_a[i];
//  for(int j=tick-1;j>=0;j--) loc_b[tick-1-j] = tmploc_b[j];

//  free(tmploc_a);
//  free(tmploc_b);  

  int tick = smith_waterman(seq_a, seq_b, mu, delta, loc_a, loc_b, consensus_a, consensus_b);

  char *cseq_a = (char *) malloc( sizeof(char) * tick );
  char *cseq_b = (char *) malloc( sizeof(char) * tick );

  for(int i=tick-1;i>=0;i--) cseq_a[tick-1-i] = consensus_a[i];
  for(int j=tick-1;j>=0;j--) cseq_b[tick-1-j] = consensus_b[j];
  string cstring_a(cseq_a);
  string cstring_b(cseq_b);

  std:size_t pos = 0;
  int ngap_b = 0;
  while(true) {
    if(pos>0) pos++;
    std::size_t found = cstring_b.find_first_of('-',pos);
    if (found!=std::string::npos) {
      pos = found;
      ngap_b++;
    }
    else {
        break;
   }
  }

  pos = 0;
  int ngap_a = 0;
  while(true) {
    if(pos>0) pos++;
    std::size_t found = cstring_a.find_first_of('-',pos);
    if (found!=std::string::npos) {
      pos = found;
      ngap_a++;
    }
    else {
        break;
   }
  }

 int match = 0;
 for(int i=0; i<tick; i++)
        if( cstring_a.compare(i,1,cstring_b.substr(i,1)) == 0 ) match++;

 if(operation_index == 0) {

    int direction = 0;
    if( ((tick - ngap_a - ngap_b - match) <= 0) ) direction = 1; 
    return direction;

 } else if(operation_index == 1) {

   if(loc_a[0] < 5000) {
      for(int i=0; i<(loc_a[0]-1); i++) outFile << " ";
      outFile << seq_b.substr(0,1).c_str() << cstring_b.substr(0,tick).c_str();
      for(int i=(loc_a[0]+tick+1); i<=seq_a.length(); i++ ) outFile << " ";
      outFile  << "\t" << DDD << endl;
   } else {
      outFile << " Excess ==  " << loc_a[0] << " " << loc_a[1] << endl;
   }

  }

  free(cseq_a);
  free(cseq_b);
//  free(H);
//  free(I_i);
//  free(I_j);
//  free(temp);
  free(consensus_a);
  free(consensus_b);

  free(loc_a);
  free(loc_b);

}


double similarity_score(char a,char b,double mu){

  double result;
  if(a==b){
      result=1.;
    }
  else{
      result=-mu;
    }
  return result;
}


double find_array_max(double array[],int length, int &ind){

  double max = array[0];            // start with max = first element
  ind = 0;

  for(int i = 1; i<length; i++){
      if(array[i] > max){
        max = array[i];
        ind = i;
      }
  }
  return max;                    // return highest value in array
}


// -------------------------------------------------------------------


char _int_to_base [4] = {'G', 'A', 'T', 'C'};
unsigned char _base_to_int [256] = {
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, //   0
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, //  20
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, //  40
		255, 255, 255, 255, 255,   1, 255,   3, 255, 255, 255,   0, 255, 255, 255, 255, 255, 255, 255, 255, //  60
		255, 255, 255, 255,   2, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   1, 255,   3, //  80
		255, 255, 255,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   2, 255, 255, 255, // 100
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, // 120
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, // 140
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, // 160
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, // 180
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, // 200
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, // 220
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255                      // 240
};
//               0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19

string currAccession;


void compare_strings(int *output, int offset, int range, string seq_ref, string seq_query) {

  float error = 0.85;

  for(int i=0; i<offset; i++) {
    int cn = 0;
    for(int j=0; j<range; j++) {
        char rc = seq_ref[j+i];
        char qc = seq_query[j];
        if( _base_to_int[rc] == _base_to_int[qc] ) cn++;
    }
    if( cn >= int(error*range) ) {
        output[0] = +1;
        output[1] = i;
        break;
    }
  }

 if(output[0] == 0) {
  for(int i=0; i<offset; i++) {
    int cn = 0;
    for(int j=0; j<range; j++) {
        char rc = seq_ref[  seq_ref.length()-1-j-i];
        char qc = seq_query[seq_ref.length()-1-j];
        if( _base_to_int[rc] == _base_to_int[qc] ) cn++;
    }
    if( cn >= int(error*range) ) {
        output[0] = +2;
        output[1] = i;
        break;
    }
  }
 }

  if(output[0] == 0) {
   string rev_seq = revcomp(seq_query);
   for(int i=0; i<offset; i++) {
    int cn = 0;
    for(int j=0; j<range; j++) {
        char rc = seq_ref[j+i];
        char qc = rev_seq[j];
        if( _base_to_int[rc] == _base_to_int[qc] ) cn++;
    }
    if( cn >= int(error*range) ) {
        output[0] = -1;
        output[1] = i;
        break;
    }
   }
 }

  if(output[0] == 0) {
   string rev_seq = revcomp(seq_query);
   for(int i=0; i<offset; i++) {
    int cn = 0;
    for(int j=0; j<range; j++) {
        char rc = seq_ref[seq_ref.length()-1-j-i];
        char qc = rev_seq[rev_seq.length()-1-j];
        if( _base_to_int[rc] == _base_to_int[qc] ) cn++;
    }
    if( cn >= int(error*range) ) {
        output[0] = -2;
        output[1] = i;
        break;
    }
   }
 }

}



//void get_kmer_to_intvalArray (string kmer_forward, int *forward, string kmer_backward, int *backward, int nkmer) {
void get_kmer_to_intvalArray (string kmer_forward, int *forward, int nkmer) {
//   string rev_kmer_backward = revcomp(kmer_backward);
   for(int i=0; i<nkmer; i++) {
	char c = kmer_forward[i];
	*(forward + i) = _base_to_int[c];

//	char rc = rev_kmer_backward[i];
//	*(backward + i) = _base_to_int[rc];
   }
}

void get_kmer2intvalArray (string kmer, int *intarray, int nkmer) {
 for(int i=0; i<nkmer; i++) {
        char c = kmer[i];
        *(intarray + i) = _base_to_int[c];
 }
}
 
bool contains_non_gatc (string kmer) {

  for (unsigned int i = 0; i < kmer.size(); i++) {
	char c = kmer[i];

	if ((_base_to_int[c] > 3) || (_base_to_int[c] < 0))
	  return(false);
/*
	if (! (c == 'g' || c == 'G'
                   || c == 'a' || c == 'A'
                   || c == 't' || c == 'T'
		   || c == 'c' || c == 'C')
		) {
	  return(true);
	}
*/
  }

  return(true);
}


string read_sequence_from_file (string filename) {
  
  ifstream fileReader (filename.c_str());
  if (fileReader == 0) { // couldn't open file
	throw(stacktrace() + "\n\nCould not open " + filename + "\n");
  }
  
  string mySequence;
  
  char c_line [MAX_LINE_LENGTH];
  
  
  fileReader.getline(c_line, MAX_LINE_LENGTH);
  while (! fileReader.eof() ) {
	if (c_line[0] != '>') {
	  string s_line (c_line);
	  
	  for (unsigned int i = 0; i < strlen(c_line); i++) {
		char c = tolower(c_line[i]);
		if (c == ' ' || c == '\t' || c == '\n') { continue;}
		mySequence += c;
	  }
	}
	
	fileReader.getline(c_line, MAX_LINE_LENGTH);
  }
  
  return (mySequence);
}


fastaRecord readNextFastaRecord (ifstream& reader) {
  
  fastaRecord fr;

  if (reader.eof()) {
	return (fr);
  }
  
  string line;
  
  // prompt till the accession
  if (currAccession.length() == 0) {
	// must read next accession
	while (getline(reader, line)) {
	  if (line[0] == '>') {
		currAccession = line;
		break;
	  }
	}
  }
  
  fr.accession = currAccession;
  
  while (getline(reader, line)) {
	if (line[0] == '>') {
	  currAccession = line;
	  break;
	}
	else {
	  // append characters that are not whitespace
	  for (unsigned int i = 0; i < line.size(); i++) {
		char c = line[i];
                
		if (c != ' ' && c != '\t' && c != '\n') {
		  fr.sequence += c;
		}
	  }
	}
  }
   
  return(fr);
}
        
string revcomp (const string kmer) {
  
  string revstring;
  
  for (int i = kmer.size() -1; i >= 0; i--) {
	char c = kmer[i];
	char revchar;
	
	switch (c) {
	
	case 'g':
	  revchar = 'c';
	  break;
	
	case 'G':
	  revchar = 'C';
	  break;
	  
	case 'a':
	  revchar = 't';
	  break;

	case 'A':
	  revchar = 'T';
	  break;

	case 't':
	  revchar = 'a';
	  break;
	  
	case 'T':
	  revchar = 'A';
	  break;

	case 'c':
	  revchar = 'g';
	  break;
	  
	case 'C':
	  revchar = 'G';
	  break;

	default:
	  revchar = 'N';
	}
	
        
	revstring += revchar;
        
  }
  
  
  return (revstring);
}

kmer_int_type_t revcomp_val(kmer_int_type_t kmer, unsigned int kmer_length)
{
	kmer_int_type_t rev_kmer = 0;
	kmer = ~kmer;
	for (unsigned int i = 0; i < kmer_length; i++) {

		int base = kmer & 3;
		rev_kmer = rev_kmer << 2;
		rev_kmer+= base;
		kmer = kmer >> 2;

	}

	return rev_kmer;
}

string remove_whitespace (string s) {

  string r = "";

  for (unsigned int i = 0; i < s.length(); i++) {
	
	char c = s[i];
	
	if (c != '\t' && c != '\n' && c != ' ') {
	  r += c;
	}
  }

  return(r);
}

int base_to_int_value (char nucleotide) {

  switch (nucleotide) {
	
  case 'G':
  case 'g':
	return(0);
  
  case 'A':
  case 'a':
	return(1);

  case 'T':
  case 't':
	return(2);
	
  case 'C':
  case 'c':
	return(3);
	
  default:
	return(-1);
  
  }

}

char int_to_base(int baseval) {
  
  if (baseval < 0 || baseval > 3) {
	throw (stacktrace() + "\n\nError, baseval out of range 0-3");
  }

  return(_int_to_base[baseval]);
}


kmer_int_type_t get_maximum_kmer_intval(unsigned int kmer_length) {

   char c = 'C';
   kmer_int_type_t max_kmer = 0;
   for(unsigned int i = 0; i< kmer_length; i++) {
        int val = _base_to_int[c];
        max_kmer = max_kmer << 2;
        max_kmer |= val;
   }
   return(max_kmer);
}


kmer_int_type_t kmer_to_intval(string kmer) {

 
  if (kmer.length() > 32) {
	return(-1);
//	throw(stacktrace() + "\n\nerror, kmer length exceeds 32");
  }

  kmer_int_type_t kmer_val = 0;
  
  for (unsigned int i = 0; i < kmer.length(); i++) {
	char c = kmer[i];
	int val = _base_to_int[c];
        /* ottmi: Don't need this here: the only possible source for non-gatc characters is
           the reads file and we already check in add_kmer() */
        /* bhaas-to-ottmi: I need to put this back in....  There are other sources where we
           don't explicitly check, and not doing so here causes problems downstream */
        /* deccles-to-bhass: In the interest of code speed / efficiency, the non-gatc check
           is better inlined here -- it's already working out the value per-char, so we get
           the check for a single if statement per character */
        if(val > 3){
 //         stringstream errstr;
 //         errstr << "\n\nerror, kmer contains nongatc: " << kmer;
 //         cerr << errstr.str();
 //         throw(stacktrace() + errstr.str());
            return(-1);
        }
   
//	 cerr << "Char " << c << "=" << val << endl;

	kmer_val = kmer_val << 2;
	kmer_val |= val;
	
//	 cerr << "\tkmerval: " << kmer_val << endl;
  
	
  }
  
//  cerr << "Kmer: " << kmer << " = " << kmer_val << endl;
  
  return(kmer_val);
}

string decode_kmer_from_intval(kmer_int_type_t intval, unsigned int kmer_length) {

  string kmer(kmer_length, ' ');
  
  for (unsigned int i = 1; i <= kmer_length; i++) {
	
	int base_num = intval & 3ll;
	
	kmer[kmer_length-i] = _int_to_base[base_num];
	
	// cerr << "base: " << base << endl;
	
	intval = intval >> 2;
  }

  return(kmer);
}

vector<kmer_int_type_t> get_Fkmer_candidates(kmer_int_type_t seed_kmer, unsigned int kmer_length) {
	kmer_int_type_t forward_prefix = (seed_kmer << (33-kmer_length)*2) >> (32-kmer_length)*2;
	vector<kmer_int_type_t> candidates;
	for (kmer_int_type_t i=0; i<4; i++) candidates.push_back( forward_prefix | i );
	return(candidates);
}

vector<kmer_int_type_t> get_Rkmer_candidates(kmer_int_type_t seed_kmer, unsigned int kmer_length) {
	kmer_int_type_t reverse_suffix = seed_kmer >> 2;
	vector<kmer_int_type_t> candidates;
        for (kmer_int_type_t i=0; i<4; i++) candidates.push_back( (i << (kmer_length*2-2)) | reverse_suffix );
	return(candidates);	
}

float compute_entropy(kmer_int_type_t kmer, unsigned int kmer_length) {

  char counts[] = { 0, 0, 0, 0 };

  for (unsigned int i = 0; i < kmer_length; i++) {

	int c = kmer & 3;
	kmer = kmer >> 2;
	counts[c]++;
  }

  float entropy = 0;

  for (unsigned int i = 0; i < 4; i++) {

	float prob = (float)counts[i] / kmer_length;

	if (prob > 0) {
	  float val = prob * log(1/prob)/log(2.0f);
	  entropy += val;
	}
  }

  return(entropy);
}
  

float compute_entropy(string& kmer) {

  map<char,int> char_map;

  for (unsigned int i = 0; i < kmer.length(); i++) {
	
	char c = kmer[i];
	char_map[c]++;
  }

  float entropy = 0;
  
  char nucs[] = { 'G', 'A', 'T', 'C' };

  for (unsigned int i = 0; i < 4; i++) {
	
	char nuc = nucs[i];
	
	int count = char_map[nuc];
	
	float prob = (float)count / kmer.length();
	
	if (prob > 0) {
	  float val = prob * log(1/prob)/log(2.0f);
	  entropy += val;
	}
  }

  return(entropy);
}



kmer_int_type_t get_DS_kmer_val(kmer_int_type_t kmer_val, unsigned int kmer_length) {
    
    kmer_int_type_t rev_kmer = revcomp_val(kmer_val, kmer_length);
    
    if (rev_kmer > kmer_val)
        kmer_val = rev_kmer;
    
    return(kmer_val);
    
}

vector<kmer_int_type_t> sequence_string_to_kmer_int_type_vector(const string& sequence, int kmer_length) {

    vector<kmer_int_type_t> kit_vec;
    
    for (unsigned int i = 0; i <= sequence.length() - kmer_length; i++) {
        
        string kmer = sequence.substr(i, kmer_length);
                
        kmer_int_type_t k = kmer_to_intval(kmer);
        
        kit_vec.push_back(k);
    }

    return(kit_vec);
    
}

string replace_nonGATC_chars_with_A (string& str) {
    
    stringstream newStr;

    for (unsigned int i = 0; i < str.size(); i++) {
        char c = str[i];
        
        if (_base_to_int[c] > 3)
            c = 'A';
        
        newStr << c;
    }

    return(newStr.str());

}

//bool Sort_kmer_by_count_desc (const Kmer_Occurence_Pair& i, const Kmer_Occurence_Pair& j) {
//        return (i.second > j.second);
//}

