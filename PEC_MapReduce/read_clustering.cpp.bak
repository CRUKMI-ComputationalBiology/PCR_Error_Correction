
#include "mpi.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "sys/stat.h"

#define __STDC_LIMIT_MACROS
#include "mapreduce.h"
#include "keyvalue.h"
#include "blockmacros.h"
#include "typedefs.h"

#include "fstream"
#include "iostream"
#include "sstream"

#include "vector"
#include "map"
#include "set"
#include "algorithm"
#include "time.h"
#include "math.h"

#include "Fasta_reader.hpp"
#include "sequenceUtil.hpp"

#include "IRKE.hpp"
#include "KmerCounter.hpp"
#include "stacktrace.hpp"
#include "argProcessor.hpp"

#include "mrSubroutine.h"

using namespace MAPREDUCE_NS;
using namespace std;


void Execute(const char * command) {
    int ret = system(command);
    if (ret != 0) {
        cout << "COMMAND: " << command << endl;
        cout << "Died with exit code " << ret << endl;
        cout << "Exiting." << endl;
        exit(-1);
    }
}


int main(int narg, char **args)
{
  MPI_Init(&narg,&args);

  Data data;

  MPI_Comm_rank(MPI_COMM_WORLD,&data.me);
  MPI_Comm_size(MPI_COMM_WORLD,&data.nprocs);

  data.kmer_length = 25;

  string scratch_directory;
  int page_size = 128;

  int num_args = 1;
  try {
       ArgProcessor in_args(narg, args);

       if (in_args.isArgSet("-K")) {
            data.kmer_length = in_args.getIntVal("-K");
            num_args += 2;
            if(data.me==0) cerr << "Kmer length set to: " << data.kmer_length << endl;
       }

       if(in_args.isArgSet("--PageSize")) {
            page_size = in_args.getIntVal("--PageSize");
            num_args += 2;
            if(data.me==0) cerr << "Page size for map reduce object set to: " << page_size << endl << endl;
       }

       if(in_args.isArgSet("--ScratchDir")) {
            scratch_directory = in_args.getStringVal("--ScratchDir");
            num_args += 2;
            if(data.me==0) cerr << "Scratch directory set to: " << scratch_directory << endl << endl;
       }	

  }

  catch(exception& e) {
        cerr << "error: " << e.what() << "\n";
        return 1;
  }


  data.seed = 123456789;
  srand48(data.seed+data.me);

  int pbits = 0;
  while ((1 << pbits) < data.nprocs) pbits++;
  data.pshift = 63 - pbits;
  int hbits = pbits + 1;
  data.lmask = ALLBITS >> hbits;

  data.nthresh = 100;



// ################################################
//

 // stringstream fpath;
 // fpath << scratch_directory;

  MapReduce *mrLink = new MapReduce(MPI_COMM_WORLD);
  mrLink->memsize = page_size;
  mrLink->verbosity = 1;
  mrLink->timer = 1;
  mrLink->set_fpath(scratch_directory.c_str());

  MapReduce *mrHead = new MapReduce(MPI_COMM_WORLD);
  mrHead->memsize = page_size;
  mrHead->verbosity = 1;
  mrHead->timer = 1;
  mrHead->set_fpath(scratch_directory.c_str());

  MapReduce *mrSeq = new MapReduce(MPI_COMM_WORLD);
  mrSeq->memsize = page_size;
  mrSeq->verbosity = 1;
  mrSeq->timer = 1;
  mrSeq->set_fpath(scratch_directory.c_str());

  MapReduce *mrV = new MapReduce(MPI_COMM_WORLD);
  mrV->memsize = page_size;
  mrV->verbosity = 1;
  mrV->timer = 1;
  mrV->set_fpath(scratch_directory.c_str());

  MapReduce *mrZ = new MapReduce(MPI_COMM_WORLD);
  mrZ->memsize = page_size;
  mrZ->verbosity = 1;
  mrZ->timer = 1;
  mrZ->set_fpath(scratch_directory.c_str());

//################################################
//


 data.MAX_RECURSION = 1;
 data.MIN_SEED_ENTROPY = 1.5;
 data.MIN_SEED_COVERAGE = 2;

 data.DS = false;

 data.PACMAN = false;
 data.CRAWL = false;
 data.crawl_length = 1;
 data.min_any_entropy = 0.4;

 data.prune_error_kmers = true;
 data.min_ratio_non_error = 0.05f;
 data.min_kmer_count = 1;

 data.MIN_CONNECTIVITY_RATIO = 0.0;
 data.MIN_ASSEMBLY_LENGTH = 151;
 data.MIN_ASSEMBLY_COVERAGE = 2;

 data.error = 0.95;
 data.mismatch = 5;
 data.offside  = 5;

 data.flag = 0;

 int nseqs = mrSeq->map(narg-num_args,&args[num_args],0,1,0,fileread_RNAseq_HeadSeq,&data);
 //:: kv(head, seq)

 data.flagall = (uint64_t *) malloc(sizeof(uint64_t) * data.nprocs);
 MPI_Allgather(&data.flag,1,MPI_UNSIGNED_LONG_LONG,data.flagall,1,MPI_UNSIGNED_LONG_LONG,MPI_COMM_WORLD);
 mrSeq->map(mrSeq,map_ID_HeadSeq,&data);

// mrLink->map(mrSeq,map_kmer_ID_loc, &data);
// mrLink->collate(NULL);
// mrLink->reduce(reduce_Link_kmer, &data); 

// mrLink->collate(NULL);
// mrLink->reduce(reduce_Link, &data);


//  for(int i=1; i<=10; i++) {
//     if(data.me == 0) cerr << endl << "Current stage of linking = " << i << endl;
//     data.offside = i;

     mrZ->map(mrSeq,map_kmer_ID_loc, &data);

     mrZ->collate(NULL);
     mrZ->reduce(reduce_Link_kmer, &data);

     mrZ->collate(NULL);
     mrZ->reduce(reduce_Link, &data);

     mrLink->add(mrZ); 
     mrLink->collate(NULL);
     mrLink->reduce(reduce_selfAssign, &data);

//  }

// data.offside = 10;
// mrZ->map(mrSeq,map_kmer_ID_loc, &data);
// mrZ->collate(NULL);
// mrZ->reduce(reduce_Link_kmer, &data);

// mrZ->collate(NULL);
// mrZ->reduce(reduce_Link, &data);

// mrZ->map(mrSeq, map_head_zoneID, &data);
// mrZ->collate(NULL);
// mrZ->reduce(reduce_Link_from_pairReads, &data);

// mrLink->add(mrZ);

// int nLink = mrLink->map(narg-num_args,&args[num_args],0,1,0,fileread_LinkInfo,&data);
 //::  kv(head1, head2) 

// int nseqs = mrSeq->map(narg-num_args,&args[num_args],0,1,0,fileread_RNAseq,&data);
 //:: kv(head, seq)

//  mrHead->map(mrLink, map_LinkInfo_header, &data); 
//  mrHead->collate(NULL);
//  data.flag = 0;
//  mrHead->reduce(reduce_LinkInfo_header, &data);
  //:: kv(head, RankID);

//  data.flagall = (uint64_t *) malloc(sizeof(uint64_t) * data.nprocs);
//  MPI_Allgather(&data.flag,1,MPI_UNSIGNED_LONG_LONG,data.flagall,1,MPI_UNSIGNED_LONG_LONG,MPI_COMM_WORLD);
//  mrHead->map(mrHead, map_LinkInfo_header_ID, &data);
  //:: kv(head, ID)

//  mrLink->add(mrHead);
//  mrLink->collate(NULL);

//  data.side = 0;
//  mrLink->reduce(reduce_LinkID, &data);

//  mrLink->add(mrHead);
//  mrLink->collate(NULL);

//  data.side = 1;
//  mrLink->reduce(reduce_LinkID, &data);
  //:: kv(Edge_LinkIDs, null)

// ###################################################################
// 
//  First step of clustering
//

  mrV->map(mrLink,edge_to_vertices,NULL);
  mrV->collate(NULL);
  mrV->reduce(reduce_self_zone,NULL);

  int niterates = 0;

  while(1) {

    niterates++;

    mrZ->map(mrLink,map_edge_vert,NULL);
    mrZ->add(mrV);
    mrZ->collate(NULL);
    mrZ->reduce(reduce_edge_zone,NULL);

    mrZ->collate(NULL);
    data.flag = 0;
    mrZ->reduce(reduce_zone_winner,&data);

    uint64_t flagall = 0;
    MPI_Allreduce(&data.flag,&flagall,1,MPI_UNSIGNED_LONG_LONG,MPI_SUM,MPI_COMM_WORLD);
    if (flagall == 0) break;

    mrV->map(mrV, map_invert_multi, &data);
    mrV->map(mrZ, map_zone_multi, &data, 1);

    mrV->collate(NULL);
    mrV->reduce(reduce_zone_reassign,&data);

   if(data.me == 0) cerr <<  niterates << " th iteration on first step: the switched number of " << flagall << " zones" <<endl << endl;

  }

  mrZ->map(mrV,map_strip,NULL);
  //:: kv(ID, zone)
  mrZ->add(mrSeq);
  mrZ->collate(NULL);
  mrZ->reduce(reduce_zone1_headSeq, &data);  

//  mrHead->map(mrHead, map_invert, NULL);
  //:: kv(ID, head)

//  mrZ->add(mrHead); 
//  mrZ->collate(NULL);
//  mrZ->reduce(reduce_head_zone, &data);
  //:: kv(head, zone) 

 //:: kv(head, seq)
//  mrZ->add(mrSeq);
//  mrZ->collate(NULL);
//  mrZ->reduce(reduce_zone_head_seq, &data);
  //:: kv(zone, head_seq)  

//  mrHead->map(mrHead, map_invert, NULL);
  //:: kv(head, ID)

//  mrSeq->map(mrSeq, map_combine_head_seq, NULL);
  //:: kv(head, head_seq); 

  //:: kv(head, seq)
//  mrHead->add(mrSeq);
//  mrHead->collate(NULL);
//  mrHead->reduce(reduce_ID_HeadSeq, &data); 
  //:: kv(ID, head_seq);  

//  mrSeq->map(mrV,map_strip,NULL);
  //:: kv(ID, zone)

//  if(data.me == 0) cerr << " ---------------------- " << endl << " Ended first step " << endl << " --------------------------- " << endl;

// ###################################################
// 
//  Second step of clustering 
//

//int cc = 1;
//if(cc == 0) {

  //:: kv(zone, head_seq)
//  mrLink->map(mrZ,map_head_zoneID, NULL);
  //:: kv(head_simple, zone)

//  mrLink->collate(NULL);
//  mrLink->reduce(reduce_Link_from_pairReads, &data);
  //:: kv(link, null)

  //mrLink->collate(NULL);
  //mrLink->reduce(reduce_first_element, NULL);
  //:: kv(link, null);

//  mrV->map(mrLink,edge_to_vertices,NULL);
//  mrV->collate(NULL);
//  mrV->reduce(reduce_self_zone,NULL);

//  niterates = 0;

//  while(1) {

//    niterates++;

//    mrZ->map(mrLink,map_edge_vert,NULL);
//    mrZ->add(mrV);
//    mrZ->collate(NULL);
//    mrZ->reduce(reduce_edge_zone,NULL);

//    mrZ->collate(NULL);
//    data.flag = 0;
//    mrZ->reduce(reduce_zone_winner,&data);

//    uint64_t flagall = 0;
//    MPI_Allreduce(&data.flag,&flagall,1,MPI_UNSIGNED_LONG_LONG,MPI_SUM,MPI_COMM_WORLD);
//    if (flagall == 0) break;

//    mrV->map(mrV, map_invert_multi, &data);
//    mrV->map(mrZ, map_zone_multi, &data, 1);

//    mrV->collate(NULL);
//    mrV->reduce(reduce_zone_reassign,&data);

//   if(data.me == 0) cerr <<  niterates << " th iteration on second step: the switched number of " << flagall << " zones" <<endl << endl;

//  }	   

  //:: kv(ID, zone)
//  mrSeq->map(mrSeq, map_invert, NULL);
  //:: kv(zone, ID) 

//  mrZ->map(mrV, map_strip,     NULL);
  //:: kv(zone, zone')
//  mrZ->map(mrZ, map_valueEdge, NULL);
  //:: kv(zone, zone' in EDGE)

//  mrZ->collate(NULL);
//  mrZ->reduce(reduce_first_element, &data);

  //:: kv(zone, ID)
//  mrZ->add(mrSeq);
//  mrZ->collate(NULL);
//  mrZ->reduce(reduce_ID_zone1, &data);
  //:: kv(ID, zone') 

  // mrHead: kv(ID, head_seq)
//  mrZ->add(mrHead);
//  mrZ->collate(NULL);
//  mrZ->reduce(reduce_zone1_headSeq, &data); 
  //:: kv(zone', head_seq) 

// if(data.me == 0) cerr << " ---------------------- " << endl << " End of Second step " << endl << " --------------------------- " << endl; 

//}

// ############################################################## 


  mrZ->collate(NULL);

  data.kmer_length = 25;
  data.range = 151;

  stringstream out_filename;
  out_filename << "cluster_" << data.me << ".fa";
  data.outFile.open(out_filename.str().c_str());
  data.outFile << endl;

//  mrZ->reduce(reduce_ZoneID_Seq, &data);
  mrZ->reduce(reduce_ZoneID_Seq_Assemble_Align, &data);

  data.outFile.close();

  MPI_Barrier(MPI_COMM_WORLD);

  delete mrLink;
  delete mrSeq;
  delete mrHead;
  delete mrV;
  delete mrZ;

  MPI_Finalize();

}

